var search_data = {"index":{"searchIndex":["moviedata","movietest","add_prediction()","error()","load_data()","load_test_data()","mean()","most_similar()","movies()","new()","new()","predict()","process_line()","rating()","read_files()","rms()","run_test()","similarity()","stddev()","time_to_run()","to_a()","viewers()","created.rid"],"longSearchIndex":["moviedata","movietest","movietest#add_prediction()","movietest#error()","moviedata#load_data()","moviedata#load_test_data()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#predict()","moviedata#process_line()","moviedata#rating()","moviedata#read_files()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#time_to_run()","movietest#to_a()","moviedata#viewers()",""],"info":[["MovieData","","MovieData.html","","<p>Author &mdash; Allan Chesarone\n\n"],["MovieTest","","MovieTest.html","",""],["add_prediction","MovieTest","MovieTest.html#method-i-add_prediction","(prediction)",""],["error","MovieTest","MovieTest.html#method-i-error","(prediction)","<p>returns the difference between the actual and predicited rating for a\nprediciton\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(set, file)","<p>loads the appropriate set with the corresponding file path\n"],["load_test_data","MovieData","MovieData.html#method-i-load_test_data","(file)","<p>loads the test file into an array, each row/element a hash\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns the mean error between prediction and actual rating\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(user_id, num_of_results = 50)","<p>Will return the most similar users to user_id, based on similarity\n"],["movies","MovieData","MovieData.html#method-i-movies","(user_id)","<p>returns the hash of {movie_id =&gt; rating} for the given user\n"],["new","MovieData","MovieData.html#method-c-new","(path, base_test_pair = nil)",""],["new","MovieTest","MovieTest.html#method-c-new","()",""],["predict","MovieData","MovieData.html#method-i-predict","(user_id, movie_id)","<p>prediction based on the average rating for the most similar users excludes\nsimilar users that did not â€¦\n"],["process_line","MovieData","MovieData.html#method-i-process_line","(line, users_hash, movies_hash)","<p>processes each line of the file, storing the appropriate data in the two\nhashes\n"],["rating","MovieData","MovieData.html#method-i-rating","(user_id, movie_id)","<p>returns the rating user with user_id has given to the movie with movie_id 0\nif has not seen\n"],["read_files","MovieData","MovieData.html#method-i-read_files","(path, base_test_pair)","<p>Given the path to the dir, and the base/test pair or nil, loads the data\nfrom the files\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()",""],["run_test","MovieData","MovieData.html#method-i-run_test","(sample_size = test_set.size)","<p>runs the prediction algorithm on the first n number of samples in the test\nset\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>returns the similarity between two users, higher number is more similar\nuserIds are Strings\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()",""],["time_to_run","MovieTest","MovieTest.html#method-i-time_to_run","()",""],["to_a","MovieTest","MovieTest.html#method-i-to_a","()",""],["viewers","MovieData","MovieData.html#method-i-viewers","(movie_id)","<p>returns the users who have watched the given movie\n"],["created.rid","","doc/created_rid.html","",""]]}}